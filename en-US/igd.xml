<?xml version='1.0'?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
]>

<chapter id="pythonforyouandme-IGD">
    <title>Iterators, generators and decorators</title>

    <para>
        In this chapter we will learn about iterators, generators and decorators. 
    </para>

    <section id="pythonforyouandme-IGD-iterators">
        <title>Iterators</title>
        <indexterm><primary>Iterators</primary><secondary>Python Iterators</secondary></indexterm>

        <para>
            Python iterator objects required to support two methods while following the iterator
            protocol.
        </para>
        <para>
            <emphasis>__iter__</emphasis> returns the iterator object itself. This is used in <emphasis>for</emphasis>
            and <emphasis>in</emphasis> statements.
        </para>
        <para>
            <emphasis>next</emphasis> method returns the next value from the iterator. If there is no more items
            to return then it should raise <emphasis>StopIteration</emphasis> exception.
        </para>
<programlisting language="Python">
<![CDATA[class Counter(object):
    def __init__(self, low, high):
        self.current = low
        self.high = high

    def __iter__(self):
        'Returns itself as an iterator object'
        return self

    def next(self):
        'Returns the next value till current is lower than high'
        if self.current > self.high:
            raise StopIteration
        else:
            self.current += 1
            return self.current - 1]]>
        </programlisting>
        <para>
            Now we can use this iterator in our code.
        </para>
        <programlisting language="Python">
<![CDATA[>>> c = Counter(5,10)
>>> for i in c:
...   print i,
... 
5 6 7 8 9 10]]>
        </programlisting>        
        <para>
            Remember that an iterator object can be used only once. It means after it raises <emphasis>StopIteration</emphasis>
            once, it will keep raising the same exception.
        </para>
        <programlisting language="Python">
<![CDATA[>>> c = Counter(5,6)
>>> next(c)
5
>>> next(c)
6
>>> next(c)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<stdin>", line 11, in next
StopIteration
>>> next(c)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<stdin>", line 11, in next
StopIteration]]>
        </programlisting>
        <para>
            Using the iterator in for loop example we saw, the following example tries to show the code
            behind the scenes.
        </para>
        <programlisting language="Python">
<![CDATA[>>> iterator = iter(c)
>>> while True:
...     try:
...         x = iterator.next()
...         print x,
...     except StopIteration as e:
...         break
... 
5 6 7 8 9 10]]>
        </programlisting>        
    </section>
    <section id="pythonforyouandme-IGD-generators">
        <title>Generators</title>
        <para>
            In this section we learn about Python generators. They were introduced in Python 2.3. It
            is an easier way to create iterators using a keyword *yield* from a function.
        </para>
<programlisting language="Python">
<![CDATA[>>> def my_generator():
...     print "Inside my generator"
...     yield 'a'
...     yield 'b'
...     yield 'c'
... 
>>> my_generator()
<generator object my_generator at 0x7fbcfa0a6aa0>]]>
</programlisting>
    <para>
        In the above example we create a simple generator using the yield statements. We can use it
        in a for loop just like we use any other iterators.
    </para>

<programlisting language="Python">
<![CDATA[>>> for char in my_generator():
...     print char
... 
Inside my generator
a
b
c]]>
</programlisting>

    <para>
        In the next example we will create the same Counter class using a generator function and use it
        in a for loop.
    </para>

<programlisting language="Python">
<![CDATA[>>> def counter_generator(low, high):
...     while low <= high:
...         yield low
...         low += 1
...
>>> for i in counter_generator(5,10):
...     print i,
... 
5 6 7 8 9 10]]>
</programlisting>

    <para>
        Inside the while loop when it reaches to the *yield* statement, the value of low is returned
        and the generator state is suspended. During the second *next* call the generator resumed where
        it freeze-ed before and then the value of *low* is increased by one. It continues with the
        while loop and comes to the *yield* statement again.
    </para>
    <para>
        When you call a generator function, it returns a *generator* object. If you call *dir*
        on this object you will find that it contains *__iter__* and *next* methods among the 
        other methods.
    </para>
<programlisting language="Python">
<![CDATA[>>> c = counter_generator(5,10)
>>> dir(c)
['__class__', '__delattr__', '__doc__', '__format__', '__getattribute__', '__hash__', '__init__', '__iter__', '__name__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', 'close', 'gi_code', 'gi_frame', 'gi_running', 'next', 'send', 'throw']]]>
</programlisting>        

    <para>
        We mostly use generators for laze evaluations. This way generators become a good approach
        to work with lots of data. If you don't want to load all the data in the memory, you can use
        a generator which will pass you each piece of data at a time.
    </para>

    <para>
        One of the biggest example of such example is *os.path.walk()* function which uses a callback
        function and current *os.walk* generator. Using the generator implementation saves memory.
    </para>

    <para>
        We can have generators which produces infinite values. The following is a one such example.
    </para>
<programlisting language="Python">
<![CDATA[>>> def infinite_generator(start=0):
...     while True:
...         yield start
...         start += 1
... 
>>> for num in infinite_generator(4):
...     print num,
...     if num > 20:
...         break
... 
4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21]]>
</programlisting>        

    <para>
        If we go back to the example of *my_generator* we will find one feature of generators.
        They are not re-usable.
    </para>
<programlisting language="Python">
<![CDATA[>>> g = my_generator()
>>> for c in g:
...     print c
... 
Inside my generator
a
b
c
>>> for c in g:
...     print c
... ]]>
</programlisting>        
    
    <para>
        One way to create a reusable generator is Object based generators which does not hold any state. Any class with a *__iter__* method which yields data can be used as a object generator.
        In the following example we will recreate out counter generator.
    </para>
<programlisting language="Python">
<![CDATA[>>> class Counter(object):
...     def __init__(self, low, high):
...         self.low = low
...         self.high = high
...     def __iter__(self):
...          counter = self.low
...          while self.high >= counter:
...              yield counter
...              counter += 1
... 
>>> gobj = Counter(5, 10)
>>> for num in gobj:
...     print num,
... 
5 6 7 8 9 10
>>> for num in gobj:
...     print num,
... 
5 6 7 8 9 10]]>
</programlisting>    

    </section>
    <section id="pythonforyouandme-IGD-generator-expression">
        <title>Generator expressions</title>
        <indexterm><primary>Generator expressions</primary><secondary>Generator expressions</secondary></indexterm>

    <para>
        In this section we will learn about generator expressions which is a  high
        performance, memory efficient generalization of list comprehensions and generators.
    </para>
    <para>
        For example we will try to sum the squares of all numbers from 1 to 99.
    </para>
<programlisting language="Python">
<![CDATA[>>> sum([x*x for x in range(1,10)])]]>
</programlisting>        
    <para>
        The example actually first creates a list of the square values in memory and then it
        iterates over it and finally after sum it frees the memory. You can understand the memory
        usage in case of a big list.
    </para>

    <para>
        We can save memory usage by using a generator expression.
    </para>
<programlisting language="Python">
<![CDATA[sum(x*x for x in range(1,10))]]>
</programlisting>        

    <para>
        The syntax of generator expression says that always needs to be directly inside a set of parentheses and cannot have a comma on either side. Which basically means both the examples below are valid generator expression usage example.
    </para>

<programlisting language="Python">
<![CDATA[>>> sum(x*x for x in range(1,10))
285
>>> g = (x*x for x in range(1,10))
>>> g
<generator object <genexpr> at 0x7fc559516b90>]]>
</programlisting>        
    
    <para>
        We can have chaining of generators or generator expressions. In the following
        example we will read the file */var/log/cron* and will find if any particular
        job (in the example we are searching for anacron) is running successfully or not.
    </para>

    <para>
        We can do the same using a shell command *tail -f /var/log/cron |grep anacron*
    </para>

<programlisting language="Python">
<![CDATA[>>> jobtext = 'anacron'
>>> all = (line for line in open('/var/log/cron', 'r') )
>>> job = ( line for line in all if line.find(jobtext) != -1)
>>> text = next(job)
>>> text
"May  6 12:17:15 dhcp193-104 anacron[23052]: Job `cron.daily' terminated\n"
>>> text = next(job)
>>> text
'May  6 12:17:15 dhcp193-104 anacron[23052]: Normal exit (1 job run)\n'
>>> text = next(job)
>>> text
'May  6 13:01:01 dhcp193-104 run-parts(/etc/cron.hourly)[25907]: starting 0anacron\n']]>
</programlisting>  

    <para>
          You can write a for loop to the lines.
      </para>  
    </section>
    <section id="pythonforyouandme-IGD-clousers">
        <title>Clousers</title>
        <indexterm><primary>Clousers</primary><secondary>Clousers in Python</secondary></indexterm>

    <para>
        Clousers are nothing function which got returned by another function. We use
        clousers to remove code duplications. In the following example we create
        a simple clouser for adding numbers.
    </para>

<programlisting language="Python">
<![CDATA[>>> def add_number(num):
...     def adder(number):
...         'adder is a clouser'
...         return num + number
...     return adder
... 
>>> a_10 = add_number(10)
>>> a_10(21)
31
>>> a_10(34)
44
>>> a_5 = add_number(5)
>>> a_5(3)
8]]>
</programlisting>        
    
    <para>
        *adder* is a clouser which adds a given number to a pre-defined one.
    </para>
    </section>
    <section id="pythonforyouandme-IGD-decorators">
        <title>Decorators</title>
        <indexterm><primary>decorators</primary></indexterm>

    </section>

</chapter>
