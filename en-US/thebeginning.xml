<?xml version='1.0'?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
]>

<chapter id="pythonforyouandme-The-Beginning">
	<title>The Beginning</title>
	<para>
		So we are going to look at our first code. As python is an interpreted language, you can directly write the code into the python interpreter or write in a file and then run the file. First we are going to do that using the interpreter. To begin, type python in the command prompt (shell or terminal).
	</para>
<screen>
[kd@kdlappy ~]$ python
Python 2.5.1 (r251:54863, Oct 30 2007, 13:54:11)
[GCC 4.1.2 20070925 (Red Hat 4.1.2-33)] on linux2
Type "help", "copyright", "credits" or "license" for more information. 
>>> 
</screen>
<para>
In our first code we are going to print "Hello World!":
</para>
<screen>
<prompt>>>> </prompt><userinput>print "Hello World!"</userinput>
Hello World!
</screen>

	<section id="pythonforyouandme-The-Beginning-Section_1_helloworldpy">
		<title>helloworld.py</title>
		<para>
			Now as a serious programmer, you may want to write the above code into a source file. We will create a helloworld.py. Use any text editor you like to create the file; I used vi, but any editor, even GUI based tools like Kate or gedit, can be used.
		</para>
<programlisting language="Python">
<![CDATA[#!/usr/bin/env python
print "Hello World!"
]]>
</programlisting>        

                <para>
                To run the code, you must first make the file executable. In GNU/Linux you can do that by giving the following command in a shell or terminal:
                </para>
<screen>
<prompt>$ </prompt><userinput>chmod +x helloworld.py</userinput>
</screen>
                <para>
                You can now run the file:
                </para>
<screen>
<prompt>$ </prompt><userinput>./helloworld.py</userinput>
Hello World!
</screen>
                <para>
                You can begin the first line with <emphasis>#!</emphasis>, called a sha-bang. This tells the system to use the python interpreter to run this code. In the next line, we are printing a message. In python, we call the whole line of text a string.
                </para>

	</section>
	
	<section id="pythonforyouandme-The-Beginning-whin">
		<title>Whitespaces and indentation</title>
		<para>
			In Python, whitespace is important. We separate different identifiers with spaces. Whitespace in the beginning of the line is known as indentation, but if you indentat improperly, it will throw an error. Examples are given below:
		</para>
<screen>
<![CDATA[
>>> a = 12
>>>  a = 12
  File "<stdin>", line 1
      a = 12
          ^
          IndentationError: unexpected indent]]>
</screen>
        <warning>
            <title>Warning</title>
            <para>
                There is an extra space in the beginning of the second line which is causing the error, so always look for proper indentation.
            </para>
            <para>
            You can even cause indentation errors by mixing up tabs and spaces. For example, if you use spaces and only spaces for indentation, don't use tabs. The code may look the same, but the python will give you an error if you try to run it.
            </para>
        </warning>
    	<para>
    		So we can have few basic rules ready for spaces and indentation. 

    		<itemizedlist>
    			<listitem><para>Use 4 spaces for indentation.</para></listitem>
    			<listitem><para>Never mix tab and spaces.</para></listitem>
    			<listitem><para>One blank line between functions.</para></listitem>  
    			<listitem><para>Two blank lines between classes.</para></listitem>
    			
    		</itemizedlist>

    		There are other places where you should follow common whitespace rules:

    		<itemizedlist>
    			<listitem><para>Add a space after "," in dicts, lists, tuples, and argument lists.</para></listitem>
    			<listitem><para>Add a space after ":" in dicts.</para></listitem>
    			<listitem><para>Spaces around assignments and comparisons (except in argument list)</para></listitem>
    			<listitem><para>No spaces just inside parentheses.</para></listitem>  
    		</itemizedlist>

    	</para>
    	
	</section>
	
<section id="pythonforyouandme-The-Beginning-comments">
	<title>Comments</title>
	<para>
        Comments are bits of English text explaining what nearby code does. We write comments in the code so others can more easily understand it later. A comment line starts with <emphasis>#</emphasis>. Nothing after the <emphasis>#</emphasis> character is executed, so comments have no effect on the execution of the program.
	</para>
	<screen>
<![CDATA[>>> #this is a comment
>>> #the next line will add two numbers
>>> a = 12 + 34
>>> print c #this is a comment too :)]]>
	</screen>
    <para>
        Comments are mainly for the people who will <emphasis>develop</emphasis> or <emphasis>maintain</emphasis> the codebase, so if you have some complex code somewhere in your program, you should add enough comments so that others can understand the code later by reading the comments. You can also use standard comments:
        <programlisting language="Python" role="PYTHON">
#FIXME -- fix these code later
#TODO -- in future you have to do this
        </programlisting>        
    </para>
    

	</section>
        <section id="pythonforyouandme-The-Beginning-modules">
		<title>Modules</title>
		<para>
			Modules are python files which contain functions, classes, and variables which we can reuse later. Modules always end with a .py extension. Python itself has a vast module library included with the default installation. We will use some of these default modules. To use a module you have to import it first:
		</para>
<programlisting language="Python" role="PYTHON">
>>> import math
>>> print math.e
2.71828182846
</programlisting>
        <para>
            We will learn more about modules in the Modules chapter.
        </para>
	</section>

</chapter>

